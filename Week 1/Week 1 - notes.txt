***WEEK 1***

***MAIN COURSE***
**Compiling**
Source code : code écrit par le développeur 
Machin code : 0 et 1 

Compilation : prends le code source et le transforme en Machin code.

Le fichier <fichier>.c contient le code source
On entre la cmd make pour créer/updater le fichier avec le machine code. 
On entre la commadne ./<fichier> pour lancer le programme.
**Hello world**
``` C
#include <stdio.h>
int main (void)
{
    printf("Hello world\n");
}
```

=> voir le prg hello.c
Les conditions :
=> voir le prg compare.c
=> voir le prg agree.c
Les boucles
boucle simple : 
```c
#include <stdio.h>

int main (void)
{
    
    for (int i = 0; i < 3; i++)
    {
        printf("meow\n");
    }
}
```
Mario 
=> voir mario.c pour voir comment on crée une fonction que l'on appelle dans le code. 

+ regarder la fin de la fin pour comprendres les notions d'impresision/limites par rapport au nombre de bits.

Par exemple :
- on ne peut pas aditionner deux int de 2 milliards chacun. Avec un language 32 bits on est limités à environ 4 000 000 000 de possibilités mais avec la moitié en positif et l'autre en négatif. 
on peut utiliser les long pour augmenter mais ce n'est pas infini. 
- idem lorsque l'on fait une division : 1/3 => il faut prendre la bonne variable pour obtenir le bon résultat. Au minimum. On ne peut pas aller très loin après la virgule même avec des 'long ou double'.

***SHORTS***
**Documentation and librairies**
On peut inclure une ou plusieurs librairies en les citant au début du code. 

```C
#include <stdio.h>
#include <cs50.h>
```
Permet d'appeler des fonctions inclues dans ces librairies. 
Si on ne le fait pas, il ne sera pas possible de compiler.

Pour plus d'informations sur les fonctions contenues dans les librairies (ex stdio.h, ctyp.h, math.h) =>  https://manual.cs50.io 

=> voir fichier hello.c ; run : ./hello 

Pour installer cs50 et le faire fonctionner sur macbookair :
Après installation : 
Dans le répertoire du fichier, créer un fichier Makefile
contenu du fichier : 
LDLIBS += -lcs50
CC := clang
Enregistrer le fichier.
on peut alros utiliser la command make <fileName> sans passer par la commande : clang -lcs50 hello.c

**Short 1 : Types and variables**
1 byte = 8 bits

DATA TYPES

integer
    utilisé pour stocker des nombres entiers.
    prends toujours 4 bytes de mémoire soit 32 bits. 
    va donc de 2^-31 à 2^31 (autant de négatif que de positifs)

char
    utilisé pour stocker un charactère unique.
    prends toujours 1 byte de mémoire soit 8 bits.
    va de -127 à +127
    ASCII : A = 65 ; a = 97 ; 0 = 48 ; 
    ASCII map des bits (0 et 1) avec des caractères.

float
    utilisé pour des nombres décimaux
    prends toujours 4 bytes de mémoire soit 32 bits. 
    le nombre peut-être plus ou moins grand, tout dépend le nombre de chiffres après la virgule.
    dans certains cas :problème de précision avec les floats

double
    le double (double float) vient résoudre le problème de précision.
    prends toujorus 8 bytes soit 64 bits.

bool
    true or false 

string
    utilisé pour une série de charactères.

Pour créer une variable, on a besoin de 2 choses :
- définir le type
- donner un nom à la variable 

ex. : 
``` C
int number; 
char letter;
```

si on veut créer plusieurs variables du même type, on peut déclarer le type et mettre les noms à la suite :

ex. : 
``` C
int height, width;
char char1, char2, char3; 
``` 

Ici on vient de déclarer des variables. Elles sont vides.
On va assigner des valeurs comme suit : 
```C
int number; //declaration
number = 2; //asignment 
// on peut également déclarer et assigner en même temps cela s'appelle l'initialisation
int number = 3; //initialization
char letter = 'h'; //initialization
```
**Short 2 : Operators**

Arithmetic operators

En C on peut faire des opérations (addition/multiplication/division...)

``` c
int x = y + 1; // ademettons que y = 10 alors x = 11
x = x * 5; //si on refait une assignation plus bas avec cette ligne, on réassigne une valeur à x ; x était égal à 11. La nouvelle valeur de x est donc 11 x 5 => 55
``` 
Autre opérateur : le modulo ; représenté par un pourcentage. Le modulo est le reste d'une division.

``` c
int m  = 13 % 4; //13 modulo 4 => on veut le reste de 13/4 ; on obtiendra 1 ; m = 1
```

Syntax :

x = x * 5; 
peut aussi s'écrire :
x *= 5; 
cela fonctionne pour les autres opérateurs : 
x = x + 5;
x += 5; 

Pour incrémenter ou décrémenter une variable : 

x++;
x--;

Boolean expression :

true or false

utilisé en C pour faire des comparaison, pour prendre un chemin plutôt qu'un autre dans une loop.

Toute valeur qui n'est pas 0 est retourne true. 

Boolean expression : 

Logical &&  (ET) :
on peut écrire des expressions comme suit 
(x && y) et cela va retourner une valeur true or false.

x       y       return
true    true    true
true    false   false
false   true    false
false   false   false

Logical || (OR) : 

(x || y)

x       y       return
true    true    true
true    false   true
false   true    true
false   false   false

Logical operation ! (NOT) :

Inverse la valeur.

x       !x
true    false
false   true

Relation operators : 

less than : x < y
more than : x > y
less or equal : x =< y
more or equal : x => y

equality : x == y
inequality : x != y

***SHORT 3 : Conditional statements***
``` c
if(boolean-expression) //If the boolean-expression evaluates to true, on execute ce qui est entre les {} de haut en bas ; si l'expression retourne false, les lignes ne sont pas éxecutées.
{

}
``` 
Il  est possible de créer des if-else if-else chaine... Chaque branche est exclusive des autres.

``` c
if (boolean-expr1)
{
    //first branch
}
else if (boolean-expr2)
{
    //second branch 
}
else if (boolean-expr3)
{
    //third branch
}
else
{
    //fourth branch
}
``` 
Il est également possible de créer une chaine de branches qui ne s'excluent pas mutuellement => on satisfait toutes les conditions, on passe dans toutes les branches.

``` c
if (boolean-expr1)
{
    //first branch
}
if (boolean-expr2)
{
    //second branch
}
if (boolean-expr3)
{
    //third branch
}
else
{
    //fourth branch
}
```
Si on peut énumérer les valeurs possibles. On peut utiliser la fonction switch et éviter les else if en chaine.
exemple : pour le code suivant :

``` c
int x = GetInt(); //prompt pour demander un integer à l'utilisateur
switch(x)         //on démarre la fonction
{
    case 1 :            //évite de répéter if x = 1 then... else if ...
    printf("One !\n");
    break;              //important de faire un break à afin de sortir. Sinon il va exécuter le code qui se trouve après que la condition soit compétée ou non.
    case 2 :
    printf("Two !\n");
    break;
    case 3:
    printf("Three !\n");
    break;
    defaut :
    printf("Sorry !\n");
}
```

Si on doit faire un test simple on peut eviter écrire le code comme suit :
   
``` c
//version longue
int x;
if (expr)
{
    x = 5;
}
else
{
    x = 6;
}
//version courte
int x = (expr) ? 5 : 6; // est-ce que l'expression est vrai ? si oui : assign 5 sinon assign 6 ; 
```
***Short 4 : Loops***

3 types de loop en C (while / do while / for)

1.1 - for ever loop => boucle infinie. 
``` c
while (true)
{

}
``` 
seul manière de l'arrêter : break statement
ou bien arrêter le programme (ctrl+c dans vscode par exemple)

1.2 - While
On exécute ce qui est dans la boucle jusqu'à ce que la condition ne soit plus vraie.

``` c
 while (boolean-expr)
{

}
```
2 - do while loop
``` c
do
{

}
while (boolean-expr);
``` 
Execute le code entre les accolades et si l'expression renvoie true, retourne au do pour exécuter à nouveau. Ceci jusqu'à ce que le boolean devienne false.
On sait que le code va s'executer au moins une fois.

3 - for loop
``` c
for (int = 0; i < 0; i++) // for(declaration variable; boolean expr; action à la fin de chaque passage)
{

}
``` 
Résumé : 
while : loop repeat an unknow number of times ; 
    => usecase : pour les jeux vidéo : afficher constaemment ; 
do-while : repeat an unknown number of time but at list once;
    => usecase : on demande à un utilisateur d'entrer un nombre (on exécute donc le code une fois). s'il ne rentre pas un nombre, on demande encore et encore jusqu'à ce qu'il rentre un nombre.
for : => usecase : repeat a discrete number of times

***Short 5 : command line***

ls => list 
cd => change directory
    cd .. => remonte au dossier parent
    cd ../.. => remonte de 2 niveaux
ls => renvoi le chemin du dossier actuel

mkdir => pour créer un dossier ; exemple mkdir folder1 => crée un dossier nommé folder1 ; mkdir : make directory ; 

cp => copy ; prends 2 arguements : nom du fichier à copier et nom de la copie. exemple cp fichier1 fichier1copy ; 
    si on veut copier 1 dossier, il faut ajouter un argument pour dire que l'on veut copier son contenu;
    on rajoute -r pour indiquer la récursivité (on copie ce qui se trouve dans le dossier)
    exemple : cp -r foldeName folderNameCopy

rm <file >=> pour supprimer des fichiers/dossiers. avec demande de confirmation.
    rm -f <file>
        f pour file. supprimer un fichier sans demande de confirmation.

    rm -r <directory>
        r pour récursif qui va copier ce qui se trouve dans le dossier.
Si on veut supprimer un dossier 

mv : rename
    ex : mv <fileToRename> <newName>


